20-1-1
To do list:
- Work on the format of the logs
- Include relevant stats like bot profits, wins, losses, average win, average
loss, etc.
- Program a decent strategy and run a bunch of tests. Clean up, optimize,
organize, bug fixing, etc.
- Release first working version

***

Essentially, the fake portfolios p_fake and p_trade only store information about
how much asset and base are owned. The restriction is that the size of the fake
portfolios totals 1 when they are initialized or reset.
- p_fake tracks profits from the start disregarding all withdrawals and deposits
- p_trade tracks profits disregarding all withdrawals and deposits, but is reset
whenever the bot enters no-position status.

update_f should only be called when fake portfolios are initialized or when
a trade has been detected.
- Added a check to cancel the update_f function if apc (avg price current) == 0

So anyways.. I think what I'll do is store p_fake and p_trade as positions data
structures like self.positions_f and self.positions_t
- On tick 1 these are set up so that they have the same rin/rinT as the user
portfolio and they have a total size of 1
- There is no meaningful fake portfolio between init and tick 1.

1-2
I need to save a copy of the first portfolio and the fist candle to storage.
The first candle will be a dict object, which is fine.
The first portfolio though may require me to store a Portfolio object.
All I need from the first portfolio is the size, really. So by storing just the
positions and the first candle I can calculate this.

Indeed, I'll store the first candle and the first positions object. From this I
can calculate the needed initial value.

1-5
Bot is mostly functional, aside from unforseen bugs and unexpected behavior.

To do list:
- Program the log output
- Program a decent strategy
- Run a bunch of tests
- Finalize initial version

1-12
I've programmed the log output, programmed a decent strategy (saved local), and
ran some tests. There's still going to be a lot of work to do though.

So what I'm going to do is release something soon as 0.1.
Then I'll make updates to it like 0.1.x and 0.x.x.
Once the bot is stable, reliable, efficient, etc, then I can release version 1.0.
Version 1.x should be a long term version that I'm using on the majority of my
aws bots. I'll only be using 1.x.x on a few aws bots for testing and updating.

This is mostly working so I plan to slow down work soon and focus more on
testing and incremental progress.

5-9
Things to do:
/- Stop outputting scientific notation to the log
/- Investigate issue where the bot just stops trading (bot07_200310)
(7-8 Not really convinced that there is an issue. I'll wait for more evidence.)

7-4
/- Investigate 'depositList' bug
/- Consider ways to shorten the log when, for example, Binance goes down and
the bot is checking if it's up every 2 or 15 seconds
/- Test and make sure the bot is working by running two of the same instances,
one on pybot, and one on CT, and see if they trade at the same time and report
the same profits.
    - Test deposits and withdrawals too, and make sure that they don't affect
    the profits

***

To fix the scientific notation I'll have to add a new function called fix_dec
which takes in the float, fixes it to 8 decimal places, then removes zeroes
from the end.

7-6
- Implemented fix_dec as a function
- Converted shrink_list to a function instead of a method
- Simplified the way historical candles errors are handled

I intend to fix the depositList bug next but I wanted to do this in a separate
update.

***

The depositList bug seems to be happening because on each tick the bot is
checking for all deposits since the bot was started. But after a certain point,
the function starts throwing an error because the start date is too far back.

Traceback (most recent call last):
  File "dw-test.py", line 23, in <module>
    deposits = client.get_deposit_history(startTime = start_time)['depositList']
KeyError: 'depositList'

deposits = client.get_deposit_history(startTime = start_time)
{'msg': 'Time interval must be within 0-90 days', 'success': False}

***

Notes:
- The program gets all deposits since the bot was started
- It filters them by coin
- It checks them one by one if they are set as pending but have been filled
- It then filters everything that didn't happen in the last candle
- Everything remaining:
    - If it's pending add it to the pending list
    - If it's completed then process it

- The root of this issue is that earliest_pending is only updated on the 0 or 1
tick.
- The only thing this variable is used for is calculating when to start
importing deposits and withdrawals.
- If a new deposit comes in the insertTime should be within the new candle,
since that's when Binance would have first seen it.

7-7
There is also a bug that existed before and now. If there was a deposit or a
withdrawal within 1 candle prior to starting the bot, the bot will process it
on the first tick. Results in a false dw message followed by a false
available/unavailable funds message.
- Fixed by exiting the function early on the first tick

Another issue that I see is if a deposit was pending in the past but it got
filled in the prior candle it might send 2 log outputs. 1 for when it's
removed from the pending list. The other at the end when it's seen as a trade
completed in the last candle.
- Tested this, not an issue
- I guess it's because trades that were pending have an insertTime from before
the previous candle. As such, they are cut off when I filter the list.

7-8
Well it seems like my redo of the get_dws function is working fine. So v0.1.7
fixes the depositList bug on bots running 3+ months and it fixes a bug where
the bot would repeatedly fail to get 1m candles on startup.

***

Now the only thing that I can think of to fix is the repeated error messages
when, for example, Binance goes down. Caused by the bot retrying every 5
seconds.

7-17
I was getting a bug where my bot wasn't trading when it should.
Turns out it was because I was rounding my moving average to 8 decimals. And
the low volatility of the coin caused the MAs to have the same value after
rounding.

Don't round indicators in your strategy!
